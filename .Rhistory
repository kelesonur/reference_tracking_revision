df_narration %<>% subset(Subject != 13)
# Coding nominal, Zero, Classifier, and Pronominal categories
df_narration$ref_type <- with(df_narration, case_when(
GTR1 %in% c("Bare noun", "Point noun", "Noun Point",
"Fingerspelled noun", "CL noun", "Noun CL") ~ "Nominal",
GTR1 %in% c("Constructed action", "Constructed Action", "Plain verb", "Person agreement verb") ~ "Null",
GTR1 %in%  c("Whole entity CL", "Body part CL",
"SASS - Tracing", "SASS - Static") ~ "Classifier",
T ~ "Pronominal"))
# Coding nominal, Zero, Classifier, and Pronominal categories
df_narration$GTR1_plot <- with(df_narration, case_when(
GTR1 %in% c("Bare noun") ~ "BARE NOM",
GTR1 %in% c("Point noun", "Noun Point","CL noun", "Noun CL") ~ "M NOM",
GTR1 %in% c("Point noun", "Noun Point","CL noun", "Noun CL") ~ "FS NOM",
GTR1 %in% c("Constructed action", "Constructed Action") ~ "CA",
GTR1 %in% c("Plain verb") ~ "PLAIN",
GTR1 %in% c("Person agreement verb") ~ "AGR",
GTR1 %in% c("Whole entity CL") ~ "WECL",
GTR1 %in%  c("Body part CL")  ~ "BPCL",
GTR1 %in%  c("SASS - Tracing", "SASS - Static")  ~ "SASS",
T ~ "Pronominal"))
# Encode vector types
df_narration$Narrative %<>% as.integer()
df_narration$Subject %<>% as.integer()
df_narration$GTR1 %<>% as.factor()
df_narration$Nativeness %<>% dplyr::recode(`0` = "Late", `1` = "Native") %>% as.factor() %>% reorder.factor(new.order = c("Native","Late"))
df_narration$Discourse %<>% as.factor()
df_narration$ref_type %<>% as.factor()
# Descriptive plots
df_narration$ref_type2 <- df_narration$ref_type %>% recode('Classifier' = 'CL', 'Null' = 'NULL',
'Pronominal' = 'PRO', 'Nominal' = 'NOM')
# dropping Pronominal references because they are too few.
df_model1 <- df_narration %>% subset(ref_type !="Pronominal") %>% drop.levels()
# Contrast coding
df_model1$Nativeness %<>% reorder.factor(new.order = c("Native","Late"))
contrasts(df_model1$Nativeness) <- contr.sum(2)/2
contrasts(df_model1$Discourse) <- contr.sum(3)/2
df_model1$Group %<>% reorder.factor(new.order = c("Late2","Late1","Native"))
contrasts(df_model1$Group) <- contr.sdif(3)
# counts of ref types
ref_count <- df_narration %>% group_by(ref_type) %>% summarise(count=n())
# Model for reference type
model_1 <- brm(ref_type ~ Nativeness*Discourse + (1|Subject),
data = df_model1, family = categorical(link = "logit"),
iter = 3000, warmup = 2000, chains = 4, cores = 4, file ="./rds/model_1.rds")
# Posterior plot for reference type
df_model_1 <- mcmc_intervals_data(model_1, pars = vars(starts_with("b_")))
df_model_1$parameter %<>% dplyr::recode(`b_muNominal_Intercept` = "Nom_Intercept",
`b_muNull_Intercept` = "Null_Intercept",
`b_muNominal_Nativeness1` = "Nom_Native",
`b_muNull_Nativeness1` = "Null_Native",
`b_muNominal_Discourse1` = "Nom_Intro",
`b_muNominal_Discourse2` = "Nom_Maintain",
'b_muNominal_Nativeness1:Discourse1' = 'Nom_Native*Intro',
'b_muNominal_Nativeness1:Discourse2' = 'Nom_Native*Maintain',
'b_muNull_Nativeness1:Discourse1' = 'Null_Native*Intro',
'b_muNull_Nativeness1:Discourse2' = 'Null_Native*Maintain',
`b_muNull_Discourse1` = "Null_Intro",
`b_muNull_Discourse2` = "Null_Maintain")
saveRDS(df_model_1, "./rds/df_model_1.rds")
# Supplementary model with 3 groups of acquisition
model_3 <- brm(ref_type ~ Group*Discourse + (1|Subject),
data = df_model1, family = categorical(link = "logit"),
iter = 3000, warmup = 2000, chains = 4, cores = 4, file ="./rds/model_3.rds")
# generic libraries
library(readxl) #read excel
library(gdata) # reorder.factor
library(magrittr) # pipe
library(tidyverse) # tidy
library(ggstance)
library(janitor)
library(MASS)
theme_set(theme_bw()) #set ggplot theme
library(extrafont)
loadfonts()
# statistics libraries
library(brms) # bayesian modeling
library(bayesplot) # plot options for bayesian models
bayesplot_theme_set(new = theme_bw()) # set plot theme
library(tidybayes)
library(bayestestR)
# theme function for ggplot2
theme_apa <- function(base_size = 10, base_family = "serif", box = FALSE) {
adapted_theme <- ggplot2::theme_bw(base_size, base_family) +
ggplot2::theme(legend.position = "bottom",
plot.title = ggplot2::element_text(size = ggplot2::rel(1.1), margin = ggplot2::margin(0, 0, ggplot2::rel(14), 0))
# , axis.title = ggplot2::element_text(size = ggplot2::rel(1.1))
, axis.title.x = ggplot2::element_text(size = ggplot2::rel(1), lineheight = ggplot2::rel(1.1), margin = ggplot2::margin(ggplot2::rel(12), 0, 0, 0))
, axis.title.y = ggplot2::element_text(size = ggplot2::rel(1), lineheight = ggplot2::rel(1.1), margin = ggplot2::margin(0, ggplot2::rel(12), 0, 0))
, axis.title.y.right = ggplot2::element_text(size = ggplot2::rel(1), lineheight = ggplot2::rel(1.1), margin = ggplot2::margin(0, 0, 0, ggplot2::rel(12)))
, axis.ticks.length = ggplot2::unit(ggplot2::rel(6), "points")
, axis.text = ggplot2::element_text(size = ggplot2::rel(0.9))
, axis.text.x = ggplot2::element_text(size = ggplot2::rel(1), margin = ggplot2::margin(ggplot2::rel(6), 0, 0, 0))
, axis.text.y = ggplot2::element_text(size = ggplot2::rel(1), margin = ggplot2::margin(0, ggplot2::rel(6), 0, 0))
, axis.text.y.right = ggplot2::element_text(size = ggplot2::rel(1), margin = ggplot2::margin(0, 0, 0, ggplot2::rel(6)))
, axis.line = ggplot2::element_line()
# , axis.line.x = ggplot2::element_line()
# , axis.line.y = ggplot2::element_line()
, legend.title = ggplot2::element_text()
, legend.key = ggplot2::element_rect(fill = NA, color = NA)
, legend.key.width = ggplot2::unit(ggplot2::rel(20), "points")
, legend.key.height = ggplot2::unit(ggplot2::rel(20), "points")
, legend.margin = ggplot2::margin(
t = ggplot2::rel(16)
, r = ggplot2::rel(16)
, b = ggplot2::rel(16)
, l = ggplot2::rel(16)
, unit = "points"
)
, panel.spacing = ggplot2::unit(ggplot2::rel(14), "points")
, panel.grid.major.x = ggplot2::element_blank()
, panel.grid.minor.x = ggplot2::element_blank()
, panel.grid.major.y = ggplot2::element_blank()
, panel.grid.minor.y = ggplot2::element_blank()
, strip.background = ggplot2::element_rect(fill = NA, color = NA)
, strip.text.x = ggplot2::element_text(size = ggplot2::rel(1.2), margin = ggplot2::margin(0, 0, ggplot2::rel(10), 0))
, strip.text.y = ggplot2::element_text(size = ggplot2::rel(1.2), margin = ggplot2::margin(0, 0, 0, ggplot2::rel(10)))
)
if(box) {
adapted_theme <- adapted_theme + ggplot2::theme(panel.border = ggplot2::element_rect(color = "black"))
} else {
adapted_theme <- adapted_theme + ggplot2::theme(panel.border = ggplot2::element_blank())
}
adapted_theme
}
# Read df and drop NAs
df_narration <- read.csv("data/narration_data.csv", sep = ";") %>% tidyr::drop_na()
df_misc <- read.csv("./appendix/appendix_a_table.csv", sep=";") %>% clean_names() %>%
dplyr::mutate(Subject = as.integer(no),
Group = case_when(aoa == "0-3" ~ "Native",
aoa == "4-7" ~ "Late1",
T ~ "Late2") %>% as.factor()) %>% dplyr::select(Subject, Group)
df_narration %<>% left_join(df_misc)
# remove subject 13, native but home language is home sign instead of TiD
df_narration %<>% subset(Subject != 13)
# Coding nominal, Zero, Classifier, and Pronominal categories
df_narration$ref_type <- with(df_narration, case_when(
GTR1 %in% c("Bare noun", "Point noun", "Noun Point",
"Fingerspelled noun", "CL noun", "Noun CL") ~ "Nominal",
GTR1 %in% c("Constructed action", "Constructed Action", "Plain verb", "Person agreement verb") ~ "Null",
GTR1 %in%  c("Whole entity CL", "Body part CL",
"SASS - Tracing", "SASS - Static") ~ "Classifier",
T ~ "Pronominal"))
# Coding nominal, Zero, Classifier, and Pronominal categories
df_narration$GTR1_plot <- with(df_narration, case_when(
GTR1 %in% c("Bare noun") ~ "BARE NOM",
GTR1 %in% c("Point noun", "Noun Point","CL noun", "Noun CL") ~ "M NOM",
GTR1 %in% c("Point noun", "Noun Point","CL noun", "Noun CL") ~ "FS NOM",
GTR1 %in% c("Constructed action", "Constructed Action") ~ "CA",
GTR1 %in% c("Plain verb") ~ "PLAIN",
GTR1 %in% c("Person agreement verb") ~ "AGR",
GTR1 %in% c("Whole entity CL") ~ "WECL",
GTR1 %in%  c("Body part CL")  ~ "BPCL",
GTR1 %in%  c("SASS - Tracing", "SASS - Static")  ~ "SASS",
T ~ "Pronominal"))
# Encode vector types
df_narration$Narrative %<>% as.integer()
df_narration$Subject %<>% as.integer()
df_narration$GTR1 %<>% as.factor()
df_narration$Nativeness %<>% dplyr::recode(`0` = "Late", `1` = "Native") %>% as.factor() %>% reorder.factor(new.order = c("Native","Late"))
df_narration$Discourse %<>% as.factor()
df_narration$ref_type %<>% as.factor()
# Descriptive plots
df_narration$ref_type2 <- df_narration$ref_type %>% recode('Classifier' = 'CL', 'Null' = 'NULL',
'Pronominal' = 'PRO', 'Nominal' = 'NOM')
# dropping Pronominal references because they are too few.
df_model1 <- df_narration %>% subset(ref_type !="Pronominal") %>% drop.levels()
# Contrast coding
df_model1$Nativeness %<>% reorder.factor(new.order = c("Native","Late"))
contrasts(df_model1$Nativeness) <- contr.sum(2)/2
contrasts(df_model1$Discourse) <- contr.sum(3)/2
df_model1$Group %<>% reorder.factor(new.order = c("Late2","Late1","Native"))
contrasts(df_model1$Group) <- contr.sdif(3)
# counts of ref types
ref_count <- df_narration %>% group_by(ref_type) %>% summarise(count=n())
# Model for reference type
model_1 <- brm(ref_type ~ Nativeness*Discourse + (1|Subject),
data = df_model1, family = categorical(link = "logit"),
iter = 3000, warmup = 2000, chains = 4, cores = 4, file ="./rds/model_1.rds")
# Posterior plot for reference type
df_model_1 <- mcmc_intervals_data(model_1, pars = vars(starts_with("b_")))
df_model_1$parameter %<>% dplyr::recode(`b_muNominal_Intercept` = "Nom_Intercept",
`b_muNull_Intercept` = "Null_Intercept",
`b_muNominal_Nativeness1` = "Nom_Native",
`b_muNull_Nativeness1` = "Null_Native",
`b_muNominal_Discourse1` = "Nom_Intro",
`b_muNominal_Discourse2` = "Nom_Maintain",
'b_muNominal_Nativeness1:Discourse1' = 'Nom_Native*Intro',
'b_muNominal_Nativeness1:Discourse2' = 'Nom_Native*Maintain',
'b_muNull_Nativeness1:Discourse1' = 'Null_Native*Intro',
'b_muNull_Nativeness1:Discourse2' = 'Null_Native*Maintain',
`b_muNull_Discourse1` = "Null_Intro",
`b_muNull_Discourse2` = "Null_Maintain")
saveRDS(df_model_1, "./rds/df_model_1.rds")
# Supplementary model with 3 groups of acquisition
model_3 <- brm(ref_type ~ Group*Discourse + (1|Subject),
data = df_model1, family = categorical(link = "logit"),
iter = 3000, warmup = 2000, chains = 4, cores = 4, file ="./rds/model_3.rds")
unique(df_narration$Subject)
ranef(model_1)
# generic libraries
library(readxl) #read excel
library(gdata) # reorder.factor
library(magrittr) # pipe
library(tidyverse) # tidy
library(ggstance)
library(janitor)
library(MASS)
theme_set(theme_bw()) #set ggplot theme
library(extrafont)
loadfonts()
# statistics libraries
library(brms) # bayesian modeling
library(bayesplot) # plot options for bayesian models
bayesplot_theme_set(new = theme_bw()) # set plot theme
library(tidybayes)
library(bayestestR)
# theme function for ggplot2
theme_apa <- function(base_size = 10, base_family = "serif", box = FALSE) {
adapted_theme <- ggplot2::theme_bw(base_size, base_family) +
ggplot2::theme(legend.position = "bottom",
plot.title = ggplot2::element_text(size = ggplot2::rel(1.1), margin = ggplot2::margin(0, 0, ggplot2::rel(14), 0))
# , axis.title = ggplot2::element_text(size = ggplot2::rel(1.1))
, axis.title.x = ggplot2::element_text(size = ggplot2::rel(1), lineheight = ggplot2::rel(1.1), margin = ggplot2::margin(ggplot2::rel(12), 0, 0, 0))
, axis.title.y = ggplot2::element_text(size = ggplot2::rel(1), lineheight = ggplot2::rel(1.1), margin = ggplot2::margin(0, ggplot2::rel(12), 0, 0))
, axis.title.y.right = ggplot2::element_text(size = ggplot2::rel(1), lineheight = ggplot2::rel(1.1), margin = ggplot2::margin(0, 0, 0, ggplot2::rel(12)))
, axis.ticks.length = ggplot2::unit(ggplot2::rel(6), "points")
, axis.text = ggplot2::element_text(size = ggplot2::rel(0.9))
, axis.text.x = ggplot2::element_text(size = ggplot2::rel(1), margin = ggplot2::margin(ggplot2::rel(6), 0, 0, 0))
, axis.text.y = ggplot2::element_text(size = ggplot2::rel(1), margin = ggplot2::margin(0, ggplot2::rel(6), 0, 0))
, axis.text.y.right = ggplot2::element_text(size = ggplot2::rel(1), margin = ggplot2::margin(0, 0, 0, ggplot2::rel(6)))
, axis.line = ggplot2::element_line()
# , axis.line.x = ggplot2::element_line()
# , axis.line.y = ggplot2::element_line()
, legend.title = ggplot2::element_text()
, legend.key = ggplot2::element_rect(fill = NA, color = NA)
, legend.key.width = ggplot2::unit(ggplot2::rel(20), "points")
, legend.key.height = ggplot2::unit(ggplot2::rel(20), "points")
, legend.margin = ggplot2::margin(
t = ggplot2::rel(16)
, r = ggplot2::rel(16)
, b = ggplot2::rel(16)
, l = ggplot2::rel(16)
, unit = "points"
)
, panel.spacing = ggplot2::unit(ggplot2::rel(14), "points")
, panel.grid.major.x = ggplot2::element_blank()
, panel.grid.minor.x = ggplot2::element_blank()
, panel.grid.major.y = ggplot2::element_blank()
, panel.grid.minor.y = ggplot2::element_blank()
, strip.background = ggplot2::element_rect(fill = NA, color = NA)
, strip.text.x = ggplot2::element_text(size = ggplot2::rel(1.2), margin = ggplot2::margin(0, 0, ggplot2::rel(10), 0))
, strip.text.y = ggplot2::element_text(size = ggplot2::rel(1.2), margin = ggplot2::margin(0, 0, 0, ggplot2::rel(10)))
)
if(box) {
adapted_theme <- adapted_theme + ggplot2::theme(panel.border = ggplot2::element_rect(color = "black"))
} else {
adapted_theme <- adapted_theme + ggplot2::theme(panel.border = ggplot2::element_blank())
}
adapted_theme
}
# Read df and drop NAs
df_narration <- read.csv("data/narration_data.csv", sep = ";") %>% tidyr::drop_na()
df_misc <- read.csv("./appendix/appendix_a_table.csv", sep=";") %>% clean_names() %>%
dplyr::mutate(Subject = as.integer(no),
Group = case_when(aoa == "0-3" ~ "Native",
aoa == "4-7" ~ "Late1",
T ~ "Late2") %>% as.factor()) %>% dplyr::select(Subject, Group)
df_narration %<>% left_join(df_misc)
# remove subject 13, native but home language is home sign instead of TiD
df_narration %<>% subset(Subject != 13)
# Coding nominal, Zero, Classifier, and Pronominal categories
df_narration$ref_type <- with(df_narration, case_when(
GTR1 %in% c("Bare noun", "Point noun", "Noun Point",
"Fingerspelled noun", "CL noun", "Noun CL") ~ "Nominal",
GTR1 %in% c("Constructed action", "Constructed Action", "Plain verb", "Person agreement verb") ~ "Null",
GTR1 %in%  c("Whole entity CL", "Body part CL",
"SASS - Tracing", "SASS - Static") ~ "Classifier",
T ~ "Pronominal"))
# Coding nominal, Zero, Classifier, and Pronominal categories
df_narration$GTR1_plot <- with(df_narration, case_when(
GTR1 %in% c("Bare noun") ~ "BARE NOM",
GTR1 %in% c("Point noun", "Noun Point","CL noun", "Noun CL") ~ "M NOM",
GTR1 %in% c("Point noun", "Noun Point","CL noun", "Noun CL") ~ "FS NOM",
GTR1 %in% c("Constructed action", "Constructed Action") ~ "CA",
GTR1 %in% c("Plain verb") ~ "PLAIN",
GTR1 %in% c("Person agreement verb") ~ "AGR",
GTR1 %in% c("Whole entity CL") ~ "WECL",
GTR1 %in%  c("Body part CL")  ~ "BPCL",
GTR1 %in%  c("SASS - Tracing", "SASS - Static")  ~ "SASS",
T ~ "Pronominal"))
# Encode vector types
df_narration$Narrative %<>% as.integer()
df_narration$Subject %<>% as.integer()
df_narration$GTR1 %<>% as.factor()
df_narration$Nativeness %<>% dplyr::recode(`0` = "Late", `1` = "Native") %>% as.factor() %>% reorder.factor(new.order = c("Native","Late"))
df_narration$Discourse %<>% as.factor()
df_narration$ref_type %<>% as.factor()
# Descriptive plots
df_narration$ref_type2 <- df_narration$ref_type %>% recode('Classifier' = 'CL', 'Null' = 'NULL',
'Pronominal' = 'PRO', 'Nominal' = 'NOM')
# dropping Pronominal references because they are too few.
df_model1 <- df_narration %>% subset(ref_type !="Pronominal") %>% drop.levels()
# Contrast coding
df_model1$Nativeness %<>% reorder.factor(new.order = c("Native","Late"))
contrasts(df_model1$Nativeness) <- contr.sum(2)/2
contrasts(df_model1$Discourse) <- contr.sum(3)/2
df_model1$Group %<>% reorder.factor(new.order = c("Late2","Late1","Native"))
contrasts(df_model1$Group) <- contr.sdif(3)
# counts of ref types
ref_count <- df_narration %>% group_by(ref_type) %>% summarise(count=n())
# Model for reference type
model_1 <- brm(ref_type ~ Nativeness*Discourse + (1|Subject),
data = df_model1, family = categorical(link = "logit"),
iter = 3000, warmup = 2000, chains = 4, cores = 4, file ="./rds/model_1.rds")
# Posterior plot for reference type
df_model_1 <- mcmc_intervals_data(model_1, pars = vars(starts_with("b_")))
df_model_1$parameter %<>% dplyr::recode(`b_muNominal_Intercept` = "Nom_Intercept",
`b_muNull_Intercept` = "Null_Intercept",
`b_muNominal_Nativeness1` = "Nom_Native",
`b_muNull_Nativeness1` = "Null_Native",
`b_muNominal_Discourse1` = "Nom_Intro",
`b_muNominal_Discourse2` = "Nom_Maintain",
'b_muNominal_Nativeness1:Discourse1' = 'Nom_Native*Intro',
'b_muNominal_Nativeness1:Discourse2' = 'Nom_Native*Maintain',
'b_muNull_Nativeness1:Discourse1' = 'Null_Native*Intro',
'b_muNull_Nativeness1:Discourse2' = 'Null_Native*Maintain',
`b_muNull_Discourse1` = "Null_Intro",
`b_muNull_Discourse2` = "Null_Maintain")
saveRDS(df_model_1, "./rds/df_model_1.rds")
# Supplementary model with 3 groups of acquisition
model_3 <- brm(ref_type ~ Group*Discourse + (1|Subject),
data = df_model1, family = categorical(link = "logit"),
iter = 3000, warmup = 2000, chains = 4, cores = 4, file ="./rds/model_3.rds")
# Posterior plot for reference type
df_model_3 <- mcmc_intervals_data(model_3, pars = vars(starts_with("b_")))
df_model_3$parameter %<>% dplyr::recode(`b_muNominal_Intercept` = "Nom_Intercept",
`b_muNull_Intercept` = "Null_Intercept",
`b_muNominal_Group2M1` = "Nom_Late1-Late2",
`b_muNominal_Group3M2` = "Nom_Native-Late1",
`b_muNominal_Discourse1` = "Nom_Intro",
`b_muNominal_Discourse2` = "Nom_Maintain",
`b_muNominal_Group2M1:Discourse1` = 'Nom_L1-L2*Intro',
`b_muNominal_Group3M2:Discourse1` = 'Nom_N-L1*Intro',
`b_muNominal_Group2M1:Discourse2` = 'Nom_L1-L2*Maintain',
`b_muNominal_Group3M2:Discourse2` = 'Nom_N-L1*Maintain',
`b_muNull_Group2M1` = "Null_Late1-Late2",
`b_muNull_Group3M2` = "Null_Native-Late1",
`b_muNull_Discourse1` = "Null_Intro",
`b_muNull_Discourse2` = "Null_Maintain",
`b_muNull_Group2M1:Discourse1` = 'Null_L1-L2*Intro',
`b_muNull_Group3M2:Discourse1` = 'Null_N-L1*Intro',
`b_muNull_Group2M1:Discourse2` = 'Null_L1-L2*Maintain',
`b_muNull_Group3M2:Discourse2` = 'Null_N-L1*Maintain')
saveRDS(df_model_3, "./rds/df_model_3.rds")
#df_narration$ref_type2 <- factor(df_narration$ref_type2,levels = c("NOM", "PRO", "CL", "NULL"))
# generic libraries
library(readxl) #read excel
library(gdata) # reorder.factor
library(magrittr) # pipe
library(tidyverse) # tidy
library(ggstance)
library(janitor)
library(MASS)
theme_set(theme_bw()) #set ggplot theme
library(extrafont)
loadfonts()
# statistics libraries
library(brms) # bayesian modeling
library(bayesplot) # plot options for bayesian models
bayesplot_theme_set(new = theme_bw()) # set plot theme
library(tidybayes)
library(bayestestR)
# theme function for ggplot2
theme_apa <- function(base_size = 10, base_family = "serif", box = FALSE) {
adapted_theme <- ggplot2::theme_bw(base_size, base_family) +
ggplot2::theme(legend.position = "bottom",
plot.title = ggplot2::element_text(size = ggplot2::rel(1.1), margin = ggplot2::margin(0, 0, ggplot2::rel(14), 0))
# , axis.title = ggplot2::element_text(size = ggplot2::rel(1.1))
, axis.title.x = ggplot2::element_text(size = ggplot2::rel(1), lineheight = ggplot2::rel(1.1), margin = ggplot2::margin(ggplot2::rel(12), 0, 0, 0))
, axis.title.y = ggplot2::element_text(size = ggplot2::rel(1), lineheight = ggplot2::rel(1.1), margin = ggplot2::margin(0, ggplot2::rel(12), 0, 0))
, axis.title.y.right = ggplot2::element_text(size = ggplot2::rel(1), lineheight = ggplot2::rel(1.1), margin = ggplot2::margin(0, 0, 0, ggplot2::rel(12)))
, axis.ticks.length = ggplot2::unit(ggplot2::rel(6), "points")
, axis.text = ggplot2::element_text(size = ggplot2::rel(0.9))
, axis.text.x = ggplot2::element_text(size = ggplot2::rel(1), margin = ggplot2::margin(ggplot2::rel(6), 0, 0, 0))
, axis.text.y = ggplot2::element_text(size = ggplot2::rel(1), margin = ggplot2::margin(0, ggplot2::rel(6), 0, 0))
, axis.text.y.right = ggplot2::element_text(size = ggplot2::rel(1), margin = ggplot2::margin(0, 0, 0, ggplot2::rel(6)))
, axis.line = ggplot2::element_line()
# , axis.line.x = ggplot2::element_line()
# , axis.line.y = ggplot2::element_line()
, legend.title = ggplot2::element_text()
, legend.key = ggplot2::element_rect(fill = NA, color = NA)
, legend.key.width = ggplot2::unit(ggplot2::rel(20), "points")
, legend.key.height = ggplot2::unit(ggplot2::rel(20), "points")
, legend.margin = ggplot2::margin(
t = ggplot2::rel(16)
, r = ggplot2::rel(16)
, b = ggplot2::rel(16)
, l = ggplot2::rel(16)
, unit = "points"
)
, panel.spacing = ggplot2::unit(ggplot2::rel(14), "points")
, panel.grid.major.x = ggplot2::element_blank()
, panel.grid.minor.x = ggplot2::element_blank()
, panel.grid.major.y = ggplot2::element_blank()
, panel.grid.minor.y = ggplot2::element_blank()
, strip.background = ggplot2::element_rect(fill = NA, color = NA)
, strip.text.x = ggplot2::element_text(size = ggplot2::rel(1.2), margin = ggplot2::margin(0, 0, ggplot2::rel(10), 0))
, strip.text.y = ggplot2::element_text(size = ggplot2::rel(1.2), margin = ggplot2::margin(0, 0, 0, ggplot2::rel(10)))
)
if(box) {
adapted_theme <- adapted_theme + ggplot2::theme(panel.border = ggplot2::element_rect(color = "black"))
} else {
adapted_theme <- adapted_theme + ggplot2::theme(panel.border = ggplot2::element_blank())
}
adapted_theme
}
# Read df and drop NAs
df_narration <- read.csv("data/narration_data.csv", sep = ";") %>% tidyr::drop_na()
df_misc <- read.csv("./appendix/appendix_a_table.csv", sep=";") %>% clean_names() %>%
dplyr::mutate(Subject = as.integer(no),
Group = case_when(aoa == "0-3" ~ "Native",
aoa == "4-7" ~ "Late1",
T ~ "Late2") %>% as.factor()) %>% dplyr::select(Subject, Group)
df_narration %<>% left_join(df_misc)
# remove subject 13, native but home language is home sign instead of TiD
df_narration %<>% subset(Subject != 13)
# Coding nominal, Zero, Classifier, and Pronominal categories
df_narration$ref_type <- with(df_narration, case_when(
GTR1 %in% c("Bare noun", "Point noun", "Noun Point",
"Fingerspelled noun", "CL noun", "Noun CL") ~ "Nominal",
GTR1 %in% c("Constructed action", "Constructed Action", "Plain verb", "Person agreement verb") ~ "Null",
GTR1 %in%  c("Whole entity CL", "Body part CL",
"SASS - Tracing", "SASS - Static") ~ "Classifier",
T ~ "Pronominal"))
# Coding nominal, Zero, Classifier, and Pronominal categories
df_narration$GTR1_plot <- with(df_narration, case_when(
GTR1 %in% c("Bare noun") ~ "BARE NOM",
GTR1 %in% c("Point noun", "Noun Point","CL noun", "Noun CL") ~ "M NOM",
GTR1 %in% c("Point noun", "Noun Point","CL noun", "Noun CL") ~ "FS NOM",
GTR1 %in% c("Constructed action", "Constructed Action") ~ "CA",
GTR1 %in% c("Plain verb") ~ "PLAIN",
GTR1 %in% c("Person agreement verb") ~ "AGR",
GTR1 %in% c("Whole entity CL") ~ "WECL",
GTR1 %in%  c("Body part CL")  ~ "BPCL",
GTR1 %in%  c("SASS - Tracing", "SASS - Static")  ~ "SASS",
T ~ "Pronominal"))
# Encode vector types
df_narration$Narrative %<>% as.integer()
df_narration$Subject %<>% as.integer()
df_narration$GTR1 %<>% as.factor()
df_narration$Nativeness %<>% dplyr::recode(`0` = "Late", `1` = "Native") %>% as.factor() %>% reorder.factor(new.order = c("Native","Late"))
df_narration$Discourse %<>% as.factor()
df_narration$ref_type %<>% as.factor()
# Descriptive plots
df_narration$ref_type2 <- df_narration$ref_type %>% recode('Classifier' = 'CL', 'Null' = 'NULL',
'Pronominal' = 'PRO', 'Nominal' = 'NOM')
# dropping Pronominal references because they are too few.
df_model1 <- df_narration %>% subset(ref_type !="Pronominal") %>% drop.levels()
# Contrast coding
df_model1$Nativeness %<>% reorder.factor(new.order = c("Native","Late"))
contrasts(df_model1$Nativeness) <- contr.sum(2)/2
contrasts(df_model1$Discourse) <- contr.sum(3)/2
df_model1$Group %<>% reorder.factor(new.order = c("Late2","Late1","Native"))
contrasts(df_model1$Group) <- contr.sdif(3)
# counts of ref types
ref_count <- df_narration %>% group_by(ref_type) %>% summarise(count=n())
# Model for reference type
model_1 <- brm(ref_type ~ Nativeness*Discourse + (1|Subject),
data = df_model1, family = categorical(link = "logit"),
iter = 3000, warmup = 2000, chains = 4, cores = 4, file ="./rds/model_1.rds")
# Posterior plot for reference type
df_model_1 <- mcmc_intervals_data(model_1, pars = vars(starts_with("b_")))
df_model_1$parameter %<>% dplyr::recode(`b_muNominal_Intercept` = "Nom_Intercept",
`b_muNull_Intercept` = "Null_Intercept",
`b_muNominal_Nativeness1` = "Nom_DoD",
`b_muNull_Nativeness1` = "Null_DoD",
`b_muNominal_Discourse1` = "Nom_Intro",
`b_muNominal_Discourse2` = "Nom_Maintain",
'b_muNominal_Nativeness1:Discourse1' = 'Nom_DoD*Intro',
'b_muNominal_Nativeness1:Discourse2' = 'Nom_DoD*Maintain',
'b_muNull_Nativeness1:Discourse1' = 'Null_DoD*Intro',
'b_muNull_Nativeness1:Discourse2' = 'Null_DoD*Maintain',
`b_muNull_Discourse1` = "Null_Intro",
`b_muNull_Discourse2` = "Null_Maintain")
saveRDS(df_model_1, "./rds/df_model_1.rds")
# Supplementary model with 3 groups of acquisition
model_3 <- brm(ref_type ~ Group*Discourse + (1|Subject),
data = df_model1, family = categorical(link = "logit"),
iter = 3000, warmup = 2000, chains = 4, cores = 4, file ="./rds/model_3.rds")
# Posterior plot for reference type
df_model_3 <- mcmc_intervals_data(model_3, pars = vars(starts_with("b_")))
df_model_3$parameter %<>% dplyr::recode(`b_muNominal_Intercept` = "Nom_Intercept",
`b_muNull_Intercept` = "Null_Intercept",
`b_muNominal_Group2M1` = "Nom_Late1-Late2",
`b_muNominal_Group3M2` = "Nom_Early-Late1",
`b_muNominal_Discourse1` = "Nom_Intro",
`b_muNominal_Discourse2` = "Nom_Maintain",
`b_muNominal_Group2M1:Discourse1` = 'Nom_L1-L2*Intro',
`b_muNominal_Group3M2:Discourse1` = 'Nom_E-L1*Intro',
`b_muNominal_Group2M1:Discourse2` = 'Nom_L1-L2*Maintain',
`b_muNominal_Group3M2:Discourse2` = 'Nom_E-L1*Maintain',
`b_muNull_Group2M1` = "Null_Late1-Late2",
`b_muNull_Group3M2` = "Null_Early-Late1",
`b_muNull_Discourse1` = "Null_Intro",
`b_muNull_Discourse2` = "Null_Maintain",
`b_muNull_Group2M1:Discourse1` = 'Null_L1-L2*Intro',
`b_muNull_Group3M2:Discourse1` = 'Null_E-L1*Intro',
`b_muNull_Group2M1:Discourse2` = 'Null_L1-L2*Maintain',
`b_muNull_Group3M2:Discourse2` = 'Null_E-L1*Maintain')
saveRDS(df_model_3, "./rds/df_model_3.rds")
#df_narration$ref_type2 <- factor(df_narration$ref_type2,levels = c("NOM", "PRO", "CL", "NULL"))
